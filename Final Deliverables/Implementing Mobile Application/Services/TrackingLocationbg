package com.example.containmentzone_alert.services;
import android.app.Service;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.IBinder;
import android.util.Log;
import androidx.annotation.Nullable;
import androidx.work.WorkManager;
import com.example.containmentzone_alert.activities.TrackerSettingsActivity;
import com.example.containmentzone_alert.extras.Constants;
import com.example.containmentzone_alert.extras.LocationFetch;
import com.example.containmentzone_alert.extras.LogTags;
import com.example.containmentzone_alert.extras.Notifications;
import com.example.containmentzone_alert.sharedPreferences.SettingsSharedPreferences;
public class TrackiingLocationbg extends Service {

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Notifications.createNotificationChannel(this);

        //remove existing prompt tracker notification
        Notifications.removeNotification(
                Constants.PromptTrackerNotification_ID,
                this
        );
        Intent notificationIntent = new Intent(this, TrackerSettingsActivity.class);
        try 
            //since api26 need to use startForeground() to run services
            startForeground(
                    1,
                    Notifications.showNotification(
                            Constants.TrackingLocationNotification_ID,
                            this,
                            notificationIntent,
                            false)
            );
        }catch (Exception e){
            Notifications.showNotification(
                    Constants.TrackingLocationNotification_ID,
                    this,
                    notificationIntent,
                    true
            );
            Log.d(LogTags.Service_TAG, "onStartCommand: "+e.getMessage());
        }
        SettingsSharedPreferences.setLocationTrackerState(this, true);
        LocationFetch.setup(getApplicationContext());
        LocationFetch.startLocationUpdates();

        Log.d(LogTags.Service_TAG, "onStartCommand: service started!");

        return START_STICKY;
    }

    @Override
    public void onDestroy() {
        Notifications.removeNotification(
                Constants.TrackingLocationNotification_ID,
                this
        );
        LocationFetch.stopLocationUpdates();
        Log.d(LogTags.Service_TAG, "onDestroy: service destroyed!");
    }
}
